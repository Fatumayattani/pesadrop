import { Client, TokenId, AccountId, PendingAirdropId, TopicId } from "@hashgraph/sdk";
import { Airdrop, AirdropResult, AssociateTokenResult, ClaimAirdropResult, CreateTokenResult, HederaNetworkType, HtsTokenDetails, RejectTokenResult, TokenBalance, TransferHBARResult, TransferTokenResult, TopicInfoApiResponse, SubmitMessageResult, DissociateTokenResult, CreateTopicResult, MintTokenResult, HCSMessage, DeleteTopicResult, AssetAllowanceResult, CreateNFTOptions, CreateFTOptions, MintNFTResult } from "../types";
import { AirdropRecipient } from "../tools/hts/transactions/airdrop";
export default class HederaAgentKit {
    client: Client;
    constructor(accountId: string, privateKey: string, network?: 'mainnet' | 'testnet' | 'previewnet');
    createFT(options: CreateFTOptions): Promise<CreateTokenResult>;
    createNFT(options: CreateNFTOptions): Promise<CreateTokenResult>;
    transferToken(tokenId: TokenId, toAccountId: string | AccountId, amount: number): Promise<TransferTokenResult>;
    getHbarBalance(accountId?: string): Promise<number>;
    getHtsBalance(tokenId: string, networkType: HederaNetworkType, accountId?: string): Promise<number>;
    getAllTokensBalances(networkType: HederaNetworkType, accountId?: string): Promise<import("../types").DetailedTokenBalance[]>;
    getHtsTokenDetails(tokenId: string, networkType: HederaNetworkType): Promise<HtsTokenDetails>;
    getTokenHolders(tokenId: string | TokenId, networkType: HederaNetworkType, threshold?: number): Promise<Array<TokenBalance>>;
    associateToken(tokenId: TokenId): Promise<AssociateTokenResult>;
    dissociateToken(tokenId: TokenId): Promise<DissociateTokenResult>;
    airdropToken(tokenId: TokenId, recipients: AirdropRecipient[]): Promise<AirdropResult>;
    rejectToken(tokenId: TokenId): Promise<RejectTokenResult>;
    mintToken(tokenId: TokenId, amount: number): Promise<MintTokenResult>;
    mintNFTToken(tokenId: TokenId, tokenMetadata: Uint8Array<ArrayBufferLike>): Promise<MintNFTResult>;
    transferHbar(toAccountId: string | AccountId, amount: string): Promise<TransferHBARResult>;
    claimAirdrop(airdropId: PendingAirdropId): Promise<ClaimAirdropResult>;
    getPendingAirdrops(accountId: string, networkType: HederaNetworkType): Promise<Airdrop[]>;
    createTopic(topicMemo: string, isSubmitKey: boolean): Promise<CreateTopicResult>;
    deleteTopic(topicId: TopicId): Promise<DeleteTopicResult>;
    getTopicInfo(topicId: TopicId, networkType: HederaNetworkType): Promise<TopicInfoApiResponse>;
    submitTopicMessage(topicId: TopicId, message: string): Promise<SubmitMessageResult>;
    getTopicMessages(topicId: TopicId, networkType: HederaNetworkType, lowerTimestamp?: number, upperTimestamp?: number): Promise<Array<HCSMessage>>;
    approveAssetAllowance(spenderAccount: AccountId, amount: number, tokenId?: TokenId): Promise<AssetAllowanceResult>;
}
//# sourceMappingURL=index.d.ts.map