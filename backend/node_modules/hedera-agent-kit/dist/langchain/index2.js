"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HederaAirdropTokenTool = exports.HederaGetBalanceTool = exports.HederaTransferTokenTool = exports.HederaCreateFungibleTokenTool = void 0;
exports.createHederaTools = createHederaTools;
const tools_1 = require("@langchain/core/tools");
class HederaCreateFungibleTokenTool extends tools_1.Tool {
    constructor(hederaKit) {
        super();
        this.hederaKit = hederaKit;
        this.name = 'hedera_create_fungible_token';
        this.description = `Create a fungible token on Hedera
Inputs ( input is a JSON string ):
name: string, the name of the token e.g. My Token,
symbol: string, the symbol of the token e.g. MT,
decimals: number, the amount of decimals of the token
initialSupply: number, the initial supply of the token e.g. 100000
`;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            const tokenId = (await this.hederaKit.createFT({
                name: parsedInput.name,
                symbol: parsedInput.symbol,
                decimals: parsedInput.decimals,
                initialSupply: parsedInput.initialSupply,
                isSupplyKey: parsedInput.isSupplyKey,
            })).tokenId;
            return JSON.stringify({
                status: "success",
                message: "Token creation successful",
                initialSupply: parsedInput.initialSupply,
                tokenId: tokenId.toString(),
                solidityAddress: tokenId.toSolidityAddress(),
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.HederaCreateFungibleTokenTool = HederaCreateFungibleTokenTool;
class HederaTransferTokenTool extends tools_1.Tool {
    constructor(hederaKit) {
        super();
        this.hederaKit = hederaKit;
        this.name = 'hedera_transfer_token';
        this.description = `Transfer fungible tokens on Hedera
Inputs ( input is a JSON string ):
tokenId: string, the ID of the token to transfer e.g. 0.0.123456,
toAccountId: string, the account ID to transfer to e.g. 0.0.789012,
amount: number, the amount of tokens to transfer e.g. 100
`;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            await this.hederaKit.transferToken(parsedInput.tokenId, parsedInput.toAccountId, parsedInput.amount);
            return JSON.stringify({
                status: "success",
                message: "Token transfer successful",
                tokenId: parsedInput.tokenId,
                toAccountId: parsedInput.toAccountId,
                amount: parsedInput.amount
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.HederaTransferTokenTool = HederaTransferTokenTool;
class HederaGetBalanceTool extends tools_1.Tool {
    constructor(hederaKit) {
        super();
        this.hederaKit = hederaKit;
        this.name = 'hedera_get_hbar_balance';
        this.description = `Get the HBAR balance of the connected account
This tool takes no inputs, just pass an empty string or '{}'
`;
    }
    async _call(input) {
        try {
            const balance = await this.hederaKit.getHbarBalance();
            return JSON.stringify({
                status: "success",
                balance: balance,
                unit: "HBAR"
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.HederaGetBalanceTool = HederaGetBalanceTool;
class HederaAirdropTokenTool extends tools_1.Tool {
    constructor(hederaKit) {
        super();
        this.hederaKit = hederaKit;
        this.name = 'hedera_airdrop_token';
        this.description = `Airdrop fungible tokens to multiple accounts on Hedera
Inputs ( input is a JSON string ):
tokenId: string, the ID of the token to airdrop e.g. 0.0.123456,
recipients: array of objects containing:
  - accountId: string, the account ID to send tokens to e.g. 0.0.789012
  - amount: number, the amount of tokens to send e.g. 100
Example input: {
  "tokenId": "0.0.123456",
  "recipients": [
    {"accountId": "0.0.789012", "amount": 100},
    {"accountId": "0.0.789013", "amount": 200}
  ]
}
`;
    }
    async _call(input) {
        try {
            const parsedInput = JSON.parse(input);
            await this.hederaKit.airdropToken(parsedInput.tokenId, parsedInput.recipients);
            return JSON.stringify({
                status: "success",
                message: "Token airdrop successful",
                tokenId: parsedInput.tokenId,
                recipientCount: parsedInput.recipients.length,
                totalAmount: parsedInput.recipients.reduce((sum, r) => sum + r.amount, 0)
            });
        }
        catch (error) {
            return JSON.stringify({
                status: "error",
                message: error.message,
                code: error.code || "UNKNOWN_ERROR",
            });
        }
    }
}
exports.HederaAirdropTokenTool = HederaAirdropTokenTool;
function createHederaTools(hederaKit) {
    return [
        new HederaCreateFungibleTokenTool(hederaKit),
        new HederaTransferTokenTool(hederaKit),
        new HederaGetBalanceTool(hederaKit),
        new HederaAirdropTokenTool(hederaKit)
    ];
}
//# sourceMappingURL=index2.js.map